@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Commerce";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		CommerceConfiguration.commerceStoreFrontSetUp();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeSearchActions(actionsDescription = "Reindex all search indexes.");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			CommerceConfiguration.commerceAdminTearDown();

			CommerceConfiguration.commerceInitializersTearDown();

			User.logoutPG();
		}
	}

	@description = "This is a test for COMMERCE-6269. AddAnOptionAndVerifyIfIsPresent"
	@ignore = "true"
	@priority = "3"
	test AddAnOptionAndVerifyIfIsPresent {
		property portal.acceptance = "false";

		// TODO COMMERCE-6269 AddAnOptionAndVerifyIfIsPresent

	}

	@description = "This is a test for COMMERCE-6020. AddASKU"
	@ignore = "true"
	@priority = "3"
	test AddASKU {
		property portal.acceptance = "false";

		// TODO COMMERCE-6020 AddASKU
	}

	@description = "This is a test for COMMERCE-6287. AddASpecificationAndVerifyIfIsPresent"
	@ignore = "true"
	@priority = "3"
	test AddASpecificationAndVerifyIfIsPresent {
		property portal.acceptance = "false";

		// TODO COMMERCE-6287 AddASpecificationAndVerifyIfIsPresent
	}

	@description = "This is a test for COMMERCE-6302. AddGroupedProduct"
	@ignore = "true"
	@priority = "3"
	test AddGroupedProduct {
		property portal.acceptance = "false";

		// TODO COMMERCE-6302 AddGroupedProduct
	}

	@description = "This is a test for COMMERCE-6301. AddVirtualProduct"
	@ignore = "true"
	@priority = "3"
	test AddVirtualProduct {
		property portal.acceptance = "false";

		// TODO COMMERCE-6301 AddVirtualProduct
	}

	test CreateProductBundleWithPriceTypeDynamic {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CPCommerceProducts#CreateProductBundle";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CPCommerceCatalog.newOptionsEntry(
			optionDescription = "Option Description",
			optionFieldType = "Select from List",
			optionName = "Color");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceEntry.viewOptionsEntry(
			optionDescription = "Option Description",
			optionName = "Color");

		CPCommerceCatalog.addOptionValues(
			optionEntryName = "Color",
			optionValuesList = "Black:1");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Shoes",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(
			noOption = "true",
			optionValuesList = "Shoes:50.0");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "Color",
			title = "Add Option");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(optionValuesList = "Black:10.0");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceNavigator.gotoEntry(entryName = "Color");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Dynamic");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceNavigator.gotoEntry(entryName = "Black");

		CommerceEntry.selectAutoCompleteField(
			entryName = "SHOESSKU",
			label = "SKU");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@description = "This is a test for COMMERCE-6018. CreateProductBundleWithPriceTypeStatic"
	@ignore = "true"
	@priority = "3"
	test CreateProductBundleWithPriceTypeStatic {
		property portal.acceptance = "false";

		// TODO COMMERCE-6018 CreateProductBundleWithPriceTypeStatic
	}

	@description = "This is a test for COMMERCE-5808. EditAProduct"
	@priority = "3"
	test EditAProduct {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "ABS");

		Button.clickPublish();

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "ABS");
	}

	@description = "This is a test for COMMERCE-6022. EditASKU"
	@ignore = "true"
	@priority = "3"
	test EditASKU {
		property portal.acceptance = "false";

		// TODO COMMERCE-6022 EditASKU
	}

	@description = "This is a test for COMMERCE-5807. EditSkuAndDelete"
	@priority = "3"
	test EditSkuAndDelete {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceNavigator.searchEntry(entryName = "MIN93017");

		CommerceNavigator.gotoEntry(entryName = "MIN93017");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = "MIN930178");

		Button.clickPublish();

		AssertVisible(locator1 = "Message#SUCCESS");

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		CommerceNavigator.searchEntry(entryName = "MIN930178");

		if (IsElementPresent(locator1 = "CommerceNavigation#ANY_ENTRY_NAME")) {
			CommerceEntry.deleteCommerceEntry();

			AssertVisible(locator1 = "Message#SUCCESS");
		}
	}

	test ProductPublishing {
		property environment.acceptance = "true";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CPCommerceProducts#ProductPublishing";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "Package Quantity",
			title = "Add Option");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(optionValuesList = "6:10.0,12:20.0,24:30.0,48:40.0,112:50.0");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Black,Black:1,Blue,Blue:1,White",
			optionValues = "6,12,24,48,112",
			validationImage = "true");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Specifications");

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Specification Groups");

		CommerceEntry.createNewSpecificationGroups(
			specificationDescription = "SpecificationGroups",
			specificationTitle = "SpecificationGroups");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Specifications");

		CommerceEntry.createNewSpecificationLabels(
			specificationDescription = "SpecificationLabel",
			specificationGroupTitle = "SpecificationGroups",
			specificationTitle = "SpecificationLabel");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		Pause(locator1 = "2000");

		CommerceNavigator.searchEntry(entryName = "Simple T-Shirt");

		CommerceNavigator.gotoEntry(entryName = "Simple T-Shirt");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "SpecificationLabel",
			title = "Specifications");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceEntry.viewProductOptions(
			optionList = "6,12,24,48,112",
			optionName = "Package Quantity");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceEntry.viewProductSkus(skusList = "6:10.00,12:20.00,24:30.00,48:40.00,112:50.00");
	}

	test TranslateProductName {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CPCommerceProducts#TranslateProductName";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = "Shock Absorber");

		CommerceNavigator.gotoEntry(entryName = "Shock Absorber");

		PortletEntry.changeLocale(
			fieldName = "Name",
			locale = "es-ES");

		Type(
			locator1 = "TextInput#NAME",
			value1 = "Amortiguador");

		Button.clickPublish();

		PortletEntry.changeLocale(
			fieldName = "Name",
			locale = "es-ES");

		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = "Amortiguador");
	}

	@description = "This is a test for COMMERCE-6304. UseFriendlyURL"
	@ignore = "true"
	@priority = "3"
	test UseFriendlyURL {
		property portal.acceptance = "false";

		// TODO COMMERCE-6304 UseFriendlyURL
	}

	@description = "This is a test for COMMERCE-6303. UseSchedule"
	@ignore = "true"
	@priority = "3"
	test UseSchedule {
		property portal.acceptance = "false";

		// TODO COMMERCE-6303 UseSchedule
	}

	@description = "This is a test for COMMERCE-5805. UseSearchBarAndPagination"
	@ignore = "true"
	@priority = "3"
	test UseSearchBarAndPagination {
		property portal.acceptance = "false";

		// TODO COMMERCE-5805 UseSearchBarAndPagination
	}

	@description = "This is a test for COMMERCE-5806. UseSkuSearchBarAndPagination"
	@priority = "3"
	test UseSkuSearchBarAndPagination {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Pagination#NEXT_LINK");

		CommerceEntry.viewPaginationResults(results = "Showing 11 to 20 of 54");

		CommerceProducts.searchProduct(search = "MIN55861");

		AssertElementPresent(
			key_entryName = "MIN55861",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");
	}

	@description = "This is a test for COMMERCE-5803. UseSortingByNameAndDate"
	@priority = "3"
	test UseSortingByNameAndDate {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");
		CommerceNavigator.sortField(sortFieldName = "Name");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "ABS Sensor,Ball Joints,Bearings");

		CommerceNavigator.sortField(sortFieldName = "Name");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "Wheel Seal - Front,Wheel Bearing Grease,Wear Sensors");

		CommerceNavigator.sortField(sortFieldName = "Modified Date");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "ABS Sensor,Brake Fluid,Premium Brake Fluid");

		CommerceNavigator.sortField(sortFieldName = "Modified Date");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "U-Joint,Transmission Cooler Line Assembly,Torque Converters");
	}

}